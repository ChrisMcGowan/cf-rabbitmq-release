#! /bin/sh

set -e

<%

job = spec.job.name
default_network = spec.networks.marshal_dump().detect { |_, network_spec| network_spec.default }.last
job_ip = spec.networks.send(spec.networks.methods(false).first).ip
dns_record_name = default_network.dns_record_name
network = dns_record_name.split('.')[1..-1].join('.')
cookie = p('rabbitmq-server.cookie', network.gsub(/\./, ':'))

ssl = false
if_p("rabbitmq-server.ssl.key") do |key|
  if key
    ssl = true
  end
end

ips = [default_network.ip]
if_p("rabbitmq-server.static_ips") do |cluster_ips|
  if cluster_ips && cluster_ips.length > 1
    ips = cluster_ips
  end
end
index = Array(ips).index(job_ip)

# TLS versions with a '.' character should include single quotes
supported_tls_versions = %w{'tlsv1.2' 'tlsv1.1'}
security_options = p('rabbitmq-server.ssl.security_options', [])
if security_options.include?('enable_tls1_0')
  supported_tls_versions << "tlsv1"
end

%>
(
  PREFIX='### AUTOGENERATED BY RABBITMQ CLUSTERING - DO NOT EDIT BELOW ###'
  SUFFIX='### AUTOGENERATED BY RABBITMQ CLUSTERING - DO NOT EDIT ABOVE ###'
  SED=/bin/sed
  MKTEMP=/bin/mktemp
  RM=/bin/rm
  CP=/bin/cp
  MKDIR=/bin/mkdir
  DIRNAME=/usr/bin/dirname
  CHOWN=/bin/chown
  CHMOD=/bin/chmod
  DATE=/bin/date
  COOKIE=<%= cookie %>
  USER=vcap
  HOME_DIR=/var/vcap/store/rabbitmq
  RABBITMQ_MNESIA_DIR="${HOME_DIR}/mnesia/db"
  RABBITMQ_PLUGINS_EXPAND_DIR="${HOME_DIR}/mnesia/db-plugins-expand"
  CLUSTER_CONFIG="${HOME_DIR}/etc/rabbitmq/cluster.config"
  SCRIPT_DIR="$(${DIRNAME} $0)"

  # Unfortunate tight coupling. Beware.
  # We need this for CONF_ENV_FILE, HOME, ERL_INETRC, and for MNESIA_BASE
  . /var/vcap/packages/rabbitmq-server/privbin/rabbitmq-defaults

  HOSTS=""
  <% ips.each_index do |idx| %>
  HOSTS="${HOSTS}{host, {<%= ips[idx].gsub('.',',') %>}, [\"node<%= idx %>\"]}.\n"
  <% end %>

  # 1. Write out our erl_inetrc file. We do this to avoid modifying
  #    /etc/hosts.
  #    See http://erlang.org/doc/apps/erts/inet_cfg.html for more info.
  DIR=$(${MKTEMP} -d)
  printf "${HOSTS}{lookup, [file]}.\n" >> ${DIR}/erl_inetrc
  ${CP} ${DIR}/erl_inetrc ${ERL_INETRC}

  ${MKDIR} -p $(${DIRNAME} ${CONF_ENV_FILE})

  # 2. Modify the rabbitmq-env.conf to include the right NODENAME and SERVER_START_ARGS.
  #    SERVER_START_ARGS is appended to the Erlang VM command line, like so (shortened and formatted
  #    for readability):
  #
  # -s rabbit_clusterer boot -pa /var/vcap/packages/rabbitmq-server/privbin/../plugins/rabbitmq_clusterer-3.3.5.ez/rabbitmq_clusterer-3.3.5/ebin
  # -sname rabbit@node0
  # -rabbitmq_clusterer config "/var/vcap/store/rabbitmq/etc/rabbitmq/cluster.config"
  # -rabbit disk_free_limit 1000000
  # -rabbit cluster_partition_handling autoheal -rabbit halt_on_upgrade_failure false
  # -rabbit tcp_listeners [] -rabbit ssl_listeners [5671]
  # -rabbitmq_management listener [{port,15672},{ssl,true}]
  # -rabbitmq_mqtt ssl_listeners [8883]
  # -rabbitmq_stomp ssl_listeners [61614]
  # -rabbit ssl_options [{cacertfile,"/var/vcap/jobs/rabbitmq-server/bin/../etc/cacert.pem"},
  #                      {certfile,"/var/vcap/jobs/rabbitmq-server/bin/../etc/cert.pem"},
  #                      {keyfile,"/var/vcap/jobs/rabbitmq-server/bin/../etc/key.pem"},
  #                      {verify,verify_none},
  #                      {fail_if_no_peer_cert,false},
  #                      {versions,['tlsv1.2','tlsv1.1',tlsv1]}]
  #
  # SERVER_START_ARGS is stored in rabbitmq-env.conf (currently /var/vcap/store/rabbitmq/etc/rabbitmq/rabbitmq-env.conf),
  # which is generated in this template.
  #
  # SERVER_START_ARGS include TLS configuration and options.
  # Some of the options include quotes, both single and double. To avoid multiple layers of
  # quoting, which is quite fragile, shell script string concatenation is used:
  # 'a"'"'b" is treated as a single string, `a"'b`, by bash.
  SELF_NODE="rabbit@node<%= index %>"
  CONFIG="CONFIG_FILE='${SCRIPT_DIR}/../etc/rabbitmq'"
  NODENAME="NODENAME='${SELF_NODE}'"
  SERVER_START_ARGS="SERVER_START_ARGS='-rabbitmq_clusterer config \"${CLUSTER_CONFIG}\" -rabbit disk_free_limit 1000000 -rabbit cluster_partition_handling autoheal -rabbit halt_on_upgrade_failure false"

<% if ssl %>
  # if TLS is enabled, disable the non-TLS listener for AMQP 0-9-1 and make the management/HTTP API
  # listener use TLS.
  SERVER_START_ARGS="${SERVER_START_ARGS} -rabbit tcp_listeners [] -rabbit ssl_listeners [5671] -rabbitmq_management listener [{port,15672},{ssl,true}] -rabbitmq_mqtt ssl_listeners [8883] -rabbitmq_stomp ssl_listeners [61614]"
<% end %>
  # enclosing single quote, see the concatenation comment above
  SERVER_START_ARGS="${SERVER_START_ARGS}'"
  <% if ssl %>
  # concatenate options encoded in double quotes, see the concatenation comment above.
  # {versions,['tlsv1.2','tlsv1.1',tlsv1]} disables SSLv3 to mitigate the POODLE attack.
  SSL_OPTIONS=" -rabbit ssl_options [{cacertfile,\\\"${SCRIPT_DIR}/../etc/cacert.pem\\\"},{certfile,\\\"${SCRIPT_DIR}/../etc/cert.pem\\\"},{keyfile,\\\"${SCRIPT_DIR}/../etc/key.pem\\\"},{verify,verify_none},{fail_if_no_peer_cert,false},{versions,<%= "[#{supported_tls_versions.join(',')}]" %>}]"
  SERVER_START_ARGS="${SERVER_START_ARGS}\"${SSL_OPTIONS}\""
  <% end %>
  if [ -f ${CONF_ENV_FILE} ]
  then \
    ${CP} ${CONF_ENV_FILE} ${DIR}/env.backup
  else \
    printf '' > ${DIR}/env.backup
  fi
  ${SED} "/${PREFIX}/,/${SUFFIX}/d" < ${DIR}/env.backup > ${DIR}/env
  printf "${PREFIX}\n${NODENAME}\n${CONFIG}\n${SERVER_START_ARGS}\n${SUFFIX}\n" >> ${DIR}/env
 
  # set custom RabbitMQ db / plugin directory not specifying the node name
  printf "RABBITMQ_MNESIA_DIR=${RABBITMQ_MNESIA_DIR}\n" >> ${DIR}/env
  printf "RABBITMQ_PLUGINS_EXPAND_DIR=${RABBITMQ_PLUGINS_EXPAND_DIR}\n" >> ${DIR}/env
  ${CP} ${DIR}/env ${CONF_ENV_FILE}

  # migrate any old db / config / plugin folders to the node agnostic structure
  [ -d ${HOME_DIR}/mnesia/rabbit@node*-plugins-expand ] && mv ${HOME_DIR}/mnesia/rabbit@node*-plugins-expand $RABBITMQ_PLUGINS_EXPAND_DIR
  [ -f ${HOME_DIR}/mnesia/rabbit@node*.config ] && mv ${HOME_DIR}/mnesia/rabbit@node*.config $RABBITMQ_MNESIA_DIR-cluster.config
  [ -d ${HOME_DIR}/mnesia/rabbit@node* ] && mv ${HOME_DIR}/mnesia/rabbit@node* $RABBITMQ_MNESIA_DIR

  # 3. Write out the cluster_config
  ${MKDIR} -p $(${DIRNAME} ${CLUSTER_CONFIG})
  CONFIG_NODES=""
  <% ips.each_index do |idx| %>
  CONFIG_NODES="${CONFIG_NODES},{rabbit@node<%= idx %>,disc}"
  <% end %>
  CONFIG_NODES=$(printf "${CONFIG_NODES}" | ${SED} -e 's/^,//')
  CONFIG_VERSION=$("${DATE}" +%s)
  # configure the gospel (seed) node. Other nodes will discover cluster members
  # through it.
  CONFIG='[{gospel,{node,rabbit@node0}},{nodes,['"${CONFIG_NODES}"']},{version,'"${CONFIG_VERSION}"'}].'
  printf "${CONFIG}\n" > ${DIR}/cluster
  ${CHOWN} ${USER}:${USER} ${DIR}/cluster
  ${CP} ${DIR}/cluster ${CLUSTER_CONFIG}

  # 4. Write out the cookie
  printf "${COOKIE}" > ${DIR}/.erlang.cookie
  ${CHOWN} ${USER}:${USER} ${DIR}/.erlang.cookie
  ${CHMOD} 0400 ${DIR}/.erlang.cookie
  ${CP} -a ${DIR}/.erlang.cookie ${HOME}

  ${RM} -rf ${DIR}
)
